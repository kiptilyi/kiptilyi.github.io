{"version":3,"names":[],"mappings":"","sources":["script.min.js"],"sourcesContent":["function liveDrawing(inputId) {\n    'use sctrict'\n    const input = document.getElementById(`${inputId}`);\n    const modal = document.createElement(\"div\");\n    modal.innerHTML = `<div class=\"modal-dialog modal-full\" role=\"document\"><div class=\"modal-content\"><div class=\"modal-header\"><a id=\"downloadlink\" download=\"test\">Download</a><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button></div><div class=\"modal-body\"></div></div></div>`;\n    const modalInst = new Modal(modal);\n    const mBody = modal.querySelector(\".modal-body\");\n    const canvasFullSize = document.createElement(\"canvas\");\n    const ctxFullSize = canvasFullSize.getContext(\"2d\");\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    const clickDrag = new Array();\n    let imgFullSize;\n    let imgDraw;\n    let clickX = new Array();\n    let clickY = new Array();\n    let timer;\n    let imgData;\n    ////\n    modal.classList.add(\"modal\", \"fade\");\n    modal.id = \"drawing-app\";\n    modal.setAttribute(\"tabindex\", \"-1\");\n    modal.setAttribute(\"role\", \"dialog\");\n    modal.setAttribute(\"aria-labelledby\", \"exampleModalLabel\");\n    modal.setAttribute(\"aria-hidden\", \"true\");\n    ////\n    input.setAttribute(\"accept\", \"image/*;capture=camera\");\n    input.setAttribute(\"type\", \"file\");\n    ////\n\n    input.addEventListener(\"change\", function () {\n        uploadPhoto(input).then(src => createImgs(src), bad => alert(bad));\n        modalInst.show();\n    });\n\n    $(modal).on(\"shown.bs.modal\", function (e) {\n        resizeCanvas(imgFullSize, canvas);\n\n        redraw();\n        mBody.appendChild(canvas);\n\n        document.getElementById(\"downloadlink\").addEventListener(\"touchstart\", function (e) {\n            convertToFullSize(canvas, ctx, imgDraw, canvasFullSize, ctxFullSize, imgFullSize).then((a) => {\n                e.target.setAttribute(\"href\", a);\n            });\n        });\n\n    });\n\n    window.onresize = () => {\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n            resizeCanvas(imgFullSize, canvas);\n            redraw();\n        }, 50);\n    }\n\n    function convertToFullSize(canvasDraw, ctxDraw, ImgDraw, canvasFullSize, ctxFullSize, imgFullSize) {\n\n\n        for (let i = 0; i < arguments.length; i++) {\n            console.log(arguments[i]);\n        }\n\n        // console.log(canvasFullSize);\n\n        let promise = new Promise(function (resolve) {\n\n\n            let mainRatio = (canvasFullSize.width * canvasFullSize.height) / (canvasDraw.width * canvasDraw.height);\n\n            canvasFullSize.width = canvas.width / mainRatio;\n            canvasFullSize.height = canvas.height / mainRatio;\n\n            ctxFullSize.drawImage(imgFullSize, 0, 0, canvasFullSize.width, canvasFullSize.height);\n\n\n\n            let fullSizeClickX = new Array();\n            let fullSizeClickY = new Array();\n\n            ctxFullSize.strokeStyle = ctx.strokeStyle;\n            ctxFullSize.lineJoin = ctx.lineJoin;\n            ctxFullSize.lineWidth = ctx.lineWidth / mainRatio;\n\n            if (clickX.length && clickY.length) {\n                fullSizeClickX = clickX.map((el) => (el * canvasFullSize.width) / canvasDraw.width);\n                fullSizeClickY = clickY.map((el) => (el * canvasFullSize.height) / canvasDraw.height);\n            }\n\n            imgDraw.width = canvas.width;\n            imgDraw.height = canvas.height;\n\n\n\n            for(var i=0; i < fullSizeClickX.length; i++) {\n\n                ctxFullSize.beginPath();\n\n                if(clickDrag[i] && i) ctxFullSize.moveTo(fullSizeClickX[i-1], fullSizeClickY[i-1]);\n                else ctxFullSize.moveTo(fullSizeClickX[i]-1, fullSizeClickY[i]);\n\n                ctxFullSize.lineTo(fullSizeClickX[i], fullSizeClickY[i]);\n                ctxFullSize.closePath();\n                ctxFullSize.stroke();\n\n            }\n\n            resolve(canvasFullSize.toDataURL(\"image/jpeg\"));\n            // console.log(ctxFullSize.height);\n            // console.log(canvasFullSize.width);\n        });\n\n\n        return promise;\n    }\n\n\n    function resizeCanvas(img, canvas) {\n\n        let oldCanvasW = canvas.width;\n        let oldCanvasH = canvas.height;\n        ////\n        let imageAspectRatio = img.width / img.height;\n        let mBodyAspectRatio = mBody.clientWidth / mBody.clientHeight;\n        let renderableHeight, renderableWidth;\n\n        if (imageAspectRatio < mBodyAspectRatio) {\n            renderableHeight = mBody.clientHeight;\n            renderableWidth = img.width * (renderableHeight / img.height);\n\n        } else if (imageAspectRatio > mBodyAspectRatio) {\n            renderableWidth = mBody.clientWidth;\n            renderableHeight = img.height * (renderableWidth / img.width);\n        } else {\n            renderableHeight = mBody.clientHeight;\n            renderableWidth = mBody.clientWidth;\n        }\n\n            canvas.width = renderableWidth;\n            canvas.height = renderableHeight;\n\n        if (clickX.length && clickY.length) {\n            clickX = clickX.map((el) => (el * renderableWidth) / oldCanvasW);\n            clickY = clickY.map((el) => (el * renderableHeight) / oldCanvasH);\n        }\n\n    }\n\n    function fixImgRotate(img, data) {\n        if (data.Orientation == 6) {\n            const width = img.width;\n            const height = img.height;\n            const canvas = document.createElement('canvas');\n            canvas.width = height;\n            canvas.height = width;\n            const ctx = canvas.getContext(\"2d\");\n            ctx.transform(0, 1, -1, 0, height , 0);\n\n            ctx.drawImage(img, 0, 0, width, height);\n\n            const fixedImg = new Image();\n                fixedImg.src = canvas.toDataURL();\n\n            return fixedImg;\n        } else {\n            return img;\n        }\n\n    }\n\n    function uploadPhoto(input) {\n\n        let promise = new Promise(function (resolve, reject) {\n            if (input.files && input.files[0]) {\n                let reader = new FileReader();\n                reader.readAsDataURL(input.files[0]);\n                reader.onload = e => {\n                    resolve([e.target.result, input.files[0]]);\n                }\n            } else {\n                reject(\"Что-то пошло не так...\");\n            }\n        });\n\n        return promise;\n\n    }\n\n    function createImgs(src) {\n        imgFullSize = new Image();\n        imgDraw = new Image();\n        imgFullSize.src = src[0];\n        imgDraw.src = src[0];\n        EXIF.getData(src[1], function() {\n            imgData = EXIF.getAllTags(this)\n            imgFullSize = fixImgRotate(imgFullSize, imgData);\n            imgDraw = fixImgRotate(imgDraw, imgData);\n        });\n    }\n\n    ////\n\n    canvas.addEventListener(\"touchstart\", function(e) {\n        let mouseX = e.touches[0].pageX - this.offsetLeft;\n        let mouseY = e.touches[0].pageY - this.offsetTop;\n\n        paint = true;\n        addClick(e.touches[0].pageX - this.offsetLeft, e.touches[0].pageY - this.offsetTop);\n        redraw();\n    });\n\n    canvas.addEventListener(\"touchmove\", function(e){\n        if (paint) {\n            addClick(e.touches[0].pageX - this.offsetLeft, e.touches[0].pageY - this.offsetTop, true);\n            redraw();\n        }\n    });\n\n    canvas.addEventListener(\"touchend\", () => paint = false);\n\n    canvas.addEventListener(\"touchleave\", () => paint = false);\n\n    function addClick(x, y, dragging) {\n        clickX.push(x);\n        clickY.push(y);\n        clickDrag.push(dragging);\n    }\n\n    function redraw() {\n\n        imgDraw.width = canvas.width;\n        imgDraw.height = canvas.height;\n\n        ctx.drawImage(imgDraw, 0, 0, ctx.canvas.width, ctx.canvas.height);\n\n        ctx.strokeStyle = \"#df4b26\";\n        ctx.lineJoin = \"round\";\n        ctx.lineWidth = 5;\n\n        for(var i=0; i < clickX.length; i++) {\n\n            ctx.beginPath();\n\n            if(clickDrag[i] && i) ctx.moveTo(clickX[i-1], clickY[i-1]);\n                else ctx.moveTo(clickX[i]-1, clickY[i]);\n\n            ctx.lineTo(clickX[i], clickY[i]);\n            ctx.closePath();\n            ctx.stroke();\n\n        }\n\n    }\n\n}\n\n\nliveDrawing(\"takePhoto\");\n\n"],"file":"script.min.js"}
{"version":3,"names":[],"mappings":"","sources":["script.min.js"],"sourcesContent":["function liveDrawing(inputId) {\n    'use sctrict'\n    const input = document.getElementById(`${inputId}`);\n    const modal = document.getElementById(\"drawing-app\");\n    // const modal = document.createElement(\"div\");\n    // modal.innerHTML = `<div class=\"modal-dialog modal-full\" role=\"document\"><div class=\"modal-content\"><div class=\"modal-header\"><a id=\"downloadlink\" download=\"test\">Download</a><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button></div><div class=\"modal-body\"></div></div></div>`;\n    const modalInst = new Modal(modal);\n    const mBody = modal.querySelector(\".modal-body\");\n    const toolBar = document.getElementById(\"da-toolbar\");\n    const canvasFullSize = document.createElement(\"canvas\");\n    const ctxFullSize = canvasFullSize.getContext(\"2d\");\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    const clickDrag = new Array();\n    const colors = new Array();\n    const lineWidth = new Array();\n    let curColor = \"#ffffff\";\n    let curLineWidth = 5;\n    let imgHD;\n    let imgDraw;\n    let clickX = new Array();\n    let clickY = new Array();\n    let timer;\n    let imgData;\n    ////\n    modal.classList.add(\"modal\", \"fade\");\n    modal.id = \"drawing-app\";\n    modal.setAttribute(\"tabindex\", \"-1\");\n    modal.setAttribute(\"role\", \"dialog\");\n    modal.setAttribute(\"aria-labelledby\", \"exampleModalLabel\");\n    modal.setAttribute(\"aria-hidden\", \"true\");\n    ////\n    input.setAttribute(\"accept\", \"image/*;capture=camera\");\n    input.setAttribute(\"type\", \"file\");\n    ////\n\n    // METHODS\n\n    function convertToFullSize(canvasDraw, ctxDraw, ImgDraw, canvasFullSize, ctxFullSize, imgHD) {\n\n        return new Promise(function (resolve) {\n\n            const mainRatio = (canvasFullSize.width * canvasFullSize.height) / (canvasDraw.width * canvasDraw.height);\n\n            canvasFullSize.width = canvasDraw.width * mainRatio;\n            canvasFullSize.height = canvasDraw.height * mainRatio;\n\n            ctxFullSize.drawImage(imgHD, 0, 0, canvasFullSize.width, canvasFullSize.height);\n\n            ctxFullSize.lineJoin = ctx.lineJoin;\n\n            imgDraw.width = canvas.width;\n            imgDraw.height = canvas.height;\n\n            for (var i = 0; i < clickX.length; i++) {\n\n                ctxFullSize.beginPath();\n\n                if (clickDrag[i] && i) ctxFullSize.moveTo(clickX[i - 1] * mainRatio, clickY[i - 1] * mainRatio);\n                else ctxFullSize.moveTo((clickX[i] - 1) * mainRatio, clickY[i] * mainRatio);\n\n                ctxFullSize.lineTo(clickX[i] * mainRatio, clickY[i] * mainRatio);\n                ctxFullSize.closePath();\n                ctxFullSize.strokeStyle = colors[i];\n                ctxFullSize.lineWidth = lineWidth[i] * mainRatio;\n                ctxFullSize.stroke();\n\n            }\n\n            resolve(canvasFullSize.toDataURL(\"image/jpeg\"));\n\n        });\n\n    }\n\n    function resizeCanvas(img, canvas) {\n\n        const oldCanvasW = canvas.width;\n        const oldCanvasH = canvas.height;\n        const imageAspectRatio = img.width / img.height;\n        const mBodyAspectRatio = mBody.clientWidth / mBody.clientHeight;\n        let renderableHeight, renderableWidth;\n\n        if (imageAspectRatio < mBodyAspectRatio) {\n            renderableHeight = mBody.clientHeight;\n            renderableWidth = img.width * (renderableHeight / img.height);\n        } else if (imageAspectRatio > mBodyAspectRatio) {\n            renderableWidth = mBody.clientWidth;\n            renderableHeight = img.height * (renderableWidth / img.width);\n        } else {\n            renderableHeight = mBody.clientHeight;\n            renderableWidth = mBody.clientWidth;\n        }\n\n        canvas.width = renderableWidth;\n        canvas.height = renderableHeight;\n\n        if (clickX.length && clickY.length) {\n            clickX = clickX.map((el) => (el * renderableWidth) / oldCanvasW);\n            clickY = clickY.map((el) => (el * renderableHeight) / oldCanvasH);\n        }\n\n    }\n\n    function fixImgRotate(img, data) {\n\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n        const orientationArr = [5, 6, 7, 8];\n        const imgOrientation = data.Orientation;\n        const fullHDSide = 1920;\n        let width = img.width;\n        let height = img.height;\n\n        if (width > height && width > fullHDSide) {\n            height = height / (width / fullHDSide);\n            width = fullHDSide;\n        } else if (height > width && height > fullHDSide) {\n            width = width / (height / fullHDSide);\n            height = fullHDSide;\n        }\n\n        canvasFullSize.width = width;\n        canvasFullSize.height = height;\n\n        if (orientationArr.indexOf(imgOrientation) != -1) {\n            canvas.width = height;\n            canvas.height = width;\n        } else {\n            canvas.width = width;\n            canvas.height = height;\n        }\n\n        switch (imgOrientation) {\n            case 2:\n                ctx.transform(-1, 0, 0, 1, width, 0);\n                break;\n            case 3:\n                ctx.transform(-1, 0, 0, -1, width, height);\n                break;\n            case 4:\n                ctx.transform(1, 0, 0, -1, 0, height);\n                break;\n            case 5:\n                ctx.transform(0, 1, 1, 0, 0, 0);\n                break;\n            case 6:\n                ctx.transform(0, 1, -1, 0, height, 0);\n                break;\n            case 7:\n                ctx.transform(0, -1, -1, 0, height, width);\n                break;\n            case 8:\n                ctx.transform(0, -1, 1, 0, 0, width);\n                break;\n            default:\n                return img.src;\n        }\n\n        ctx.drawImage(img, 0, 0, width, height);\n\n        return canvas.toDataURL(\"image/jpeg\");\n\n    }\n\n    function uploadPhoto(input) {\n\n        return new Promise(function (resolve, reject) {\n            if (input.files && input.files[0]) {\n                const reader = new FileReader();\n                reader.readAsDataURL(input.files[0]);\n                reader.onload = e => {\n                    resolve([e.target.result, input.files[0]]);\n                }\n            } else {\n                reject(\"Что-то пошло не так...\");\n            }\n        });\n\n    }\n\n    function createImages(src) {\n\n        return new Promise(function (resolve) {\n            imgHD = new Image();\n            imgDraw = new Image();\n            imgHD.src = src[0];\n                EXIF.getData(src[1], function() {\n                    imgData = EXIF.getAllTags(this);\n                    imgHD.src = fixImgRotate(imgHD, imgData);\n                    imgHD.onload = () => {\n                        imgDraw = imgHD;\n                        resolve();\n                    }\n                });\n        });\n\n    }\n\n    function addClick(x, y, dragging) {\n        clickX.push(x);\n        clickY.push(y);\n        clickDrag.push(dragging);\n        colors.push(curColor);\n        lineWidth.push(curLineWidth);\n    }\n\n    function redraw() {\n\n        imgDraw.width = canvas.width;\n        imgDraw.height = canvas.height;\n\n        ctx.drawImage(imgDraw, 0, 0, ctx.canvas.width, ctx.canvas.height);\n\n        ctx.lineJoin = \"round\";\n\n        for (var i = 0; i < clickX.length; i++) {\n\n            ctx.beginPath();\n\n            if (clickDrag[i] && i) ctx.moveTo(clickX[i - 1], clickY[i - 1]);\n            else ctx.moveTo(clickX[i] - 1, clickY[i]);\n\n            ctx.lineTo(clickX[i], clickY[i]);\n            ctx.closePath();\n            ctx.strokeStyle = colors[i];\n            ctx.lineWidth = lineWidth[i];\n            ctx.stroke();\n\n        }\n\n    }\n\n    // EVENTS\n\n    input.addEventListener(\"change\", () => {uploadPhoto(input).then(src => createImages(src).then(() => modalInst.show()), bad => alert(bad))});\n\n    window.onresize = () => {\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n            resizeCanvas(imgHD, canvas);\n            redraw();\n        }, 50);\n    }\n\n    $(modal).on(\"shown.bs.modal\", () => {\n\n        resizeCanvas(imgHD, canvas);\n\n        redraw();\n\n        mBody.appendChild(canvas);\n\n        document.getElementById(\"downloadlink\").addEventListener(\"touchstart\", e => {\n            convertToFullSize(canvas, ctx, imgDraw, canvasFullSize, ctxFullSize, imgHD).then(a => {e.target.setAttribute(\"href\", a)});\n        });\n\n    });\n\n    toolBar.addEventListener(\"change\", e => {\n        let target = e.target;\n        if (target.name == \"color\") curColor = target.value;\n        if (target.name == \"lineWidth\") curLineWidth = target.value;\n    });\n\n    canvas.addEventListener(\"touchstart\", function (e) {\n\n        let mouseX = e.touches[0].pageX - this.offsetLeft;\n        let mouseY = e.touches[0].pageY - this.offsetTop;\n\n        paint = true;\n\n        addClick(e.touches[0].pageX - this.offsetLeft, e.touches[0].pageY - this.offsetTop);\n\n        redraw();\n\n    });\n\n    canvas.addEventListener(\"touchmove\", function (e) {\n\n        if (paint) {\n            addClick(e.touches[0].pageX - this.offsetLeft, e.touches[0].pageY - this.offsetTop, true);\n            redraw();\n        }\n\n    });\n\n    canvas.addEventListener(\"touchend\", () => paint = false);\n\n    canvas.addEventListener(\"touchleave\", () => paint = false);\n\n}\n\nliveDrawing(\"takePhoto\");\n\n"],"file":"script.min.js"}
{"version":3,"names":[],"mappings":"","sources":["script.min.js"],"sourcesContent":["function liveDrawing(inputId) {\n    'use sctrict'\n    const input = document.getElementById(`${inputId}`);\n    // const modal = document.getElementById(\"drawing-app\");\n    const modal = document.createElement(\"div\");\n    modal.innerHTML = `<div class=\"modal-dialog modal-full\" role=\"document\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button></div><div class=\"modal-body\"><div id=\"da-toolbar\"><div class=\"toolbar-inner\"><div class=\"tool tool-color\"><label class=\"tc-white\"><input value=\"#ffffff\" type=\"radio\" name=\"color\" checked><span class=\"color-indicator\"></span></label><label class=\"tc-black\"><input value=\"#000000\" type=\"radio\" name=\"color\"><span class=\"color-indicator\"></span></label><label class=\"tc-red\"><input value=\"#ff0000\" type=\"radio\" name=\"color\"><span class=\"color-indicator\"></span></label><label class=\"tc-green\"><input value=\"#00ff00\" type=\"radio\" name=\"color\"><span class=\"color-indicator\"></span></label><label class=\"tc-blue\"><input value=\"#0000ff\" type=\"radio\" name=\"color\"><span class=\"color-indicator\"></span></label></div><div class=\"tool tool-line_width\"><label class=\"tlw-10\"><input value=\"10\" type=\"radio\" name=\"lineWidth\"><span class=\"width-indicator\"></span></label><label class=\"tlw-7\"><input value=\"7\" type=\"radio\" name=\"lineWidth\"><span class=\"width-indicator\"></span></label><label class=\"tlw-5\"><input value=\"5\" type=\"radio\" name=\"lineWidth\" checked><span class=\"width-indicator\"></span></label><label class=\"tlw-3\"><input value=\"3\" type=\"radio\" name=\"lineWidth\"><span class=\"width-indicator\"></span></label><label class=\"tlw-1\"><input value=\"1\" type=\"radio\" name=\"lineWidth\"><span class=\"width-indicator\"></span></label></div><div class=\"tool tool-line\"><label><input class=\"tool-control\" id=\"da-line\" type=\"checkbox\"><span class=\"tool-indicator\"><span class=\"line\"></span></span></label></div><div class=\"tool tool-clean\"><button id=\"da-clean\"><svg enable-background=\"new 0 0 753.23 753.23\" version=\"1.1\" viewBox=\"0 0 753.23 753.23\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m635.54 94.154h-141.23v-47.077c0-26.01-21.068-47.077-47.078-47.077h-141.23c-26.01 0-47.077 21.067-47.077 47.077v47.077h-141.23c-26.01 0-47.077 21.067-47.077 47.077v47.077c0 25.986 21.067 47.053 47.03 47.077h517.92c25.986-0.024 47.054-21.091 47.054-47.077v-47.078c-2e-3 -26.009-21.069-47.076-47.079-47.076zm-188.31 0h-141.23v-23.539c0-12.993 10.545-23.539 23.538-23.539h94.154c12.993 0 23.538 10.545 23.538 23.539v23.539zm-329.54 564.92c0 51.996 42.157 94.153 94.154 94.153h329.54c51.996 0 94.153-42.157 94.153-94.153v-376.62h-517.85v376.62zm353.08-306c0-12.993 10.545-23.539 23.538-23.539s23.538 10.545 23.538 23.539v282.46c0 12.993-10.545 23.539-23.538 23.539s-23.538-10.546-23.538-23.539v-282.46zm-117.69 0c0-12.993 10.545-23.539 23.539-23.539s23.538 10.545 23.538 23.539v282.46c0 12.993-10.545 23.539-23.538 23.539s-23.539-10.546-23.539-23.539v-282.46zm-117.69 0c0-12.993 10.545-23.539 23.539-23.539s23.539 10.545 23.539 23.539v282.46c0 12.993-10.545 23.539-23.539 23.539s-23.539-10.546-23.539-23.539v-282.46z\"/></svg></button></div><div class=\"tool tool-complete\"><a id=\"da-accept\"><svg enable-background=\"new 0 0 611.99 611.99\" version=\"1.1\" viewBox=\"0 0 611.99 611.99\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m589.1 80.63c-30.513-31.125-79.965-31.125-110.48 0l-276.2 281.71-69.061-70.438c-30.513-31.125-79.965-31.125-110.48 0s-30.513 81.572 0 112.68l124.29 126.78c30.513 31.125 79.965 31.125 110.48 0l331.45-338.03c30.515-31.125 30.515-81.572 1e-3 -112.7z\"/></svg></a></div></div></div></div></div></div>`;\n    const modalInst = new Modal(modal);\n    const mBody = modal.querySelector(\".modal-body\");\n    const toolBar = modal.querySelector(\"#da-toolbar\");\n    const canvasFullSize = document.createElement(\"canvas\");\n    const ctxFullSize = canvasFullSize.getContext(\"2d\");\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    const clickX = new Array();\n    const clickY = new Array();\n    const clickDrag = new Array();\n    const colors = new Array();\n    const lineWidth = new Array();\n    const fullClickDrag = new Array();\n    const fullColors = new Array();\n    const fullLineWidth = new Array();\n    let fullX = new Array();\n    let fullY = new Array();\n    let curColor = \"#ffffff\";\n    let curLineWidth = 5;\n    let imgHD;\n    let imgDraw;\n    let timer;\n    let switcher;\n    let imgData;\n    ////\n    modal.classList.add(\"modal\", \"fade\");\n    modal.id = `da-modal-${inputId}`;\n    modal.setAttribute(\"tabindex\", \"-1\");\n    modal.setAttribute(\"role\", \"dialog\");\n    modal.setAttribute(\"aria-labelledby\", \"exampleModalLabel\");\n    modal.setAttribute(\"aria-hidden\", \"true\");\n    ////\n    input.setAttribute(\"accept\", \"image/*;capture=camera\");\n    input.setAttribute(\"type\", \"file\");\n    ////\n\n    // METHODS\n\n    function convertToFullSize(canvasDraw, ctxDraw, ImgDraw, canvasFullSize, ctxFullSize, imgHD) {\n\n        return new Promise(function (resolve) {\n\n            const mainRatio = (canvasFullSize.width * canvasFullSize.height) / (canvasDraw.width * canvasDraw.height);\n\n            canvasFullSize.width = canvasDraw.width * mainRatio;\n            canvasFullSize.height = canvasDraw.height * mainRatio;\n\n            ctxFullSize.drawImage(imgHD, 0, 0, canvasFullSize.width, canvasFullSize.height);\n\n            ctxFullSize.lineJoin = ctx.lineJoin;\n\n            imgDraw.width = canvas.width;\n            imgDraw.height = canvas.height;\n\n            for (var i = 0; i < fullX.length; i++) {\n\n                ctxFullSize.beginPath();\n\n                if (fullClickDrag[i] && i) ctxFullSize.moveTo(fullX[i - 1] * mainRatio, fullY[i - 1] * mainRatio);\n                else ctxFullSize.moveTo((fullX[i] - 1) * mainRatio, fullY[i] * mainRatio);\n\n                ctxFullSize.lineTo(fullX[i] * mainRatio, fullY[i] * mainRatio);\n                ctxFullSize.closePath();\n                ctxFullSize.strokeStyle = fullColors[i];\n                ctxFullSize.lineWidth = fullLineWidth[i] * mainRatio;\n                ctxFullSize.stroke();\n\n            }\n\n            resolve(canvasFullSize.toDataURL(\"image/jpeg\"));\n\n        });\n\n    }\n\n    function resizeCanvas(img, canvas) {\n\n        return new Promise(function (resolve) {\n            const oldCanvasW = canvas.width;\n            const oldCanvasH = canvas.height;\n            const imageAspectRatio = img.width / img.height;\n            const mBodyAspectRatio = mBody.clientWidth / mBody.clientHeight;\n            let renderableHeight, renderableWidth;\n\n            if (imageAspectRatio < mBodyAspectRatio) {\n                renderableHeight = mBody.clientHeight;\n                renderableWidth = img.width * (renderableHeight / img.height);\n            } else if (imageAspectRatio > mBodyAspectRatio) {\n                renderableWidth = mBody.clientWidth;\n                renderableHeight = img.height * (renderableWidth / img.width);\n            } else {\n                renderableHeight = mBody.clientHeight;\n                renderableWidth = mBody.clientWidth;\n            }\n\n            canvas.width = renderableWidth;\n            canvas.height = renderableHeight;\n\n            if (fullX.length && fullY.length) {\n                fullX = fullX.map((el) => (el * renderableWidth) / oldCanvasW);\n                fullY = fullY.map((el) => (el * renderableHeight) / oldCanvasH);\n            }\n\n            resolve([fullX, fullY, fullColors, fullLineWidth, fullClickDrag]);\n        });\n\n    }\n\n    function fixImgRotate(img, data) {\n\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n        const orientationArr = [5, 6, 7, 8];\n        const imgOrientation = data.Orientation;\n        const fullHDSide = 1920;\n        let width = img.width;\n        let height = img.height;\n\n        if (width > height && width > fullHDSide) {\n            height = height / (width / fullHDSide);\n            width = fullHDSide;\n        } else if (height > width && height > fullHDSide) {\n            width = width / (height / fullHDSide);\n            height = fullHDSide;\n        }\n\n        canvasFullSize.width = width;\n        canvasFullSize.height = height;\n\n        if (orientationArr.indexOf(imgOrientation) != -1) {\n            canvas.width = height;\n            canvas.height = width;\n        } else {\n            canvas.width = width;\n            canvas.height = height;\n        }\n\n        switch (imgOrientation) {\n            case 2:\n                ctx.transform(-1, 0, 0, 1, width, 0);\n                break;\n            case 3:\n                ctx.transform(-1, 0, 0, -1, width, height);\n                break;\n            case 4:\n                ctx.transform(1, 0, 0, -1, 0, height);\n                break;\n            case 5:\n                ctx.transform(0, 1, 1, 0, 0, 0);\n                break;\n            case 6:\n                ctx.transform(0, 1, -1, 0, height, 0);\n                break;\n            case 7:\n                ctx.transform(0, -1, -1, 0, height, width);\n                break;\n            case 8:\n                ctx.transform(0, -1, 1, 0, 0, width);\n                break;\n            default:\n                return img.src;\n        }\n\n        ctx.drawImage(img, 0, 0, width, height);\n\n        return canvas.toDataURL(\"image/jpeg\");\n\n    }\n\n    function uploadPhoto(input) {\n\n        return new Promise(function (resolve, reject) {\n            if (input.files && input.files[0]) {\n                const reader = new FileReader();\n                reader.readAsDataURL(input.files[0]);\n                reader.onload = e => {\n                    resolve([e.target.result, input.files[0]]);\n                }\n            } else {\n                reject(\"Что-то пошло не так...\");\n            }\n        });\n\n    }\n\n    function createImages(src) {\n\n        return new Promise(function (resolve) {\n            imgHD = new Image();\n            imgDraw = new Image();\n            imgHD.src = src[0];\n            EXIF.getData(src[1], function () {\n                imgData = EXIF.getAllTags(this);\n                if (!navigator.userAgent.match(/iPhone|iPad|iPod/i)) imgHD.src = fixImgRotate(imgHD, imgData);\n                else imgHD.src = src[0];\n                imgHD.onload = () => {\n                    imgDraw = imgHD;\n                    resolve();\n                }\n            });\n        });\n\n    }\n\n    function addClick(x, y, dragging) {\n\n        const callerName = arguments.callee.caller.name;\n\n        if (document.getElementById(\"da-line\").checked) {\n            if (callerName == \"touchStart\") {\n                addData();\n                switcher = true;\n            } else if (callerName == \"touchMove\") {\n                if (switcher) {\n                    addData();\n                    switcher = false;\n                }\n                clickX[clickX.length - 1] = x;\n                clickY[clickY.length - 1] = y;\n                fullX[fullX.length - 1] = x;\n                fullY[fullY.length - 1] = y;\n            }\n        } else {\n            addData();\n        }\n\n        function addData() {\n            clickX.push(x);\n            clickY.push(y);\n            fullX.push(x);\n            fullY.push(y);\n            clickDrag.push(dragging);\n            colors.push(curColor);\n            lineWidth.push(curLineWidth);\n            fullClickDrag.push(dragging);\n            fullColors.push(curColor);\n            fullLineWidth.push(curLineWidth);\n        }\n    }\n\n    function redraw(x = clickX, y = clickY, color = colors, line = lineWidth, drag = clickDrag) {\n\n        if (document.getElementById(\"da-line\").checked) {\n            x = fullX;\n            y = fullY;\n            color = fullColors;\n            line = fullLineWidth;\n            drag = fullClickDrag;\n            ctx.drawImage(imgDraw, 0, 0, ctx.canvas.width, ctx.canvas.height);\n        } else if (clickX.length != 0) {\n            ctx.drawImage(canvas, 0, 0, ctx.canvas.width, ctx.canvas.height);\n        } else {\n            ctx.drawImage(imgDraw, 0, 0, ctx.canvas.width, ctx.canvas.height);\n        }\n\n        ctx.lineJoin = \"round\";\n\n        for (let i = 0; i < x.length; i++) {\n\n            ctx.beginPath();\n\n            if (drag[i] && i) ctx.moveTo(x[i - 1], y[i - 1]);\n            else ctx.moveTo(x[i] - 1, y[i]);\n\n            ctx.lineTo(x[i], y[i]);\n            ctx.closePath();\n            ctx.strokeStyle = color[i];\n            ctx.lineWidth = line[i];\n            ctx.stroke();\n\n        }\n\n    }\n\n    function softReset(all) {\n        if (all != undefined) {\n            fullX.length = 0;\n            fullY.length = 0;\n            fullColors.length = 0;\n            fullLineWidth.length = 0;\n            fullClickDrag.length = 0;\n        }\n        clickX.length = 0;\n        clickY.length = 0;\n        colors.length = 0;\n        lineWidth.length = 0;\n        clickDrag.length = 0;\n    }\n\n    function hardReset() {\n        imgHD = new Image();\n        imgDraw = new Image();\n        softReset();\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n    }\n\n    // EVENTS\n\n    input.addEventListener(\"change\", () => {\n        hardReset();\n        uploadPhoto(input).then(src => createImages(src).then(() => modalInst.show()), bad => alert(bad))\n    });\n\n    window.onresize = () => {\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n            resizeCanvas(imgHD, canvas).then((x) => redraw(...x));\n        }, 50);\n    }\n\n    $(modal).on(\"shown.bs.modal\", () => {\n\n        resizeCanvas(imgHD, canvas).then((x) => redraw(...x));\n\n        mBody.appendChild(canvas);\n\n        toolBar.addEventListener(\"change\", e => {\n                    let target = e.target;\n                    if (target.name == \"color\") curColor = target.value;\n                    if (target.name == \"lineWidth\") curLineWidth = target.value;\n                });\n\n                document.getElementById(\"da-clean\").addEventListener(\"click\", () => {softReset(true); ctx.drawImage(imgDraw, 0, 0, ctx.canvas.width, ctx.canvas.height)});\n\n                document.getElementById(\"da-accept\").addEventListener(\"click\", () => {\n                    // console.log(\"test\");\n                    convertToFullSize(canvas, ctx, imgDraw, canvasFullSize, ctxFullSize, imgHD).then(a => {\n                        console.log(a);\n                        input.removeAttribute(\"value\");\n                        input.setAttribute(\"value\", a);\n                        modalInst.hide();\n                        modal.remove();\n                    });\n                });\n\n    });\n\n    canvas.addEventListener(\"touchstart\", function touchStart(e) {\n\n        paint = true;\n\n        addClick(e.touches[0].pageX - this.offsetLeft, e.touches[0].pageY - this.offsetTop);\n\n        imgDraw.width = canvas.width;\n        imgDraw.height = canvas.height;\n\n        redraw();\n\n    });\n\n    canvas.addEventListener(\"touchmove\", function touchMove(e) {\n\n        if (paint) {\n            addClick(e.touches[0].pageX - this.offsetLeft, e.touches[0].pageY - this.offsetTop, true);\n            redraw();\n        }\n\n    });\n\n    canvas.addEventListener(\"touchend\", () => {paint = false; softReset()});\n\n    canvas.addEventListener(\"touchleave\", () => {paint = false; softReset()});\n\n}\n\n\nconst daInputs = document.getElementsByClassName('da');\n\nfor(var i = 0; i < daInputs.length; i++) {\n    (function(index) {\n        daInputs[index].addEventListener(\"focus\", e => {\n            liveDrawing(e.target.id);\n        });\n    })(i);\n}\n//\n// function drawSign(inputName, canvasW, canvasH) {\n//     const canvas = document.createElement(\"canvas\");\n//     const btnClear = `<svg style=\"width: auto; height: ${canvasH / 2}\" enable-background=\"new 0 0 753.23 753.23\" version=\"1.1\" viewBox=\"0 0 753.23 753.23\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m635.54 94.154h-141.23v-47.077c0-26.01-21.068-47.077-47.078-47.077h-141.23c-26.01 0-47.077 21.067-47.077 47.077v47.077h-141.23c-26.01 0-47.077 21.067-47.077 47.077v47.077c0 25.986 21.067 47.053 47.03 47.077h517.92c25.986-0.024 47.054-21.091 47.054-47.077v-47.078c-2e-3 -26.009-21.069-47.076-47.079-47.076zm-188.31 0h-141.23v-23.539c0-12.993 10.545-23.539 23.538-23.539h94.154c12.993 0 23.538 10.545 23.538 23.539v23.539zm-329.54 564.92c0 51.996 42.157 94.153 94.154 94.153h329.54c51.996 0 94.153-42.157 94.153-94.153v-376.62h-517.85v376.62zm353.08-306c0-12.993 10.545-23.539 23.538-23.539s23.538 10.545 23.538 23.539v282.46c0 12.993-10.545 23.539-23.538 23.539s-23.538-10.546-23.538-23.539v-282.46zm-117.69 0c0-12.993 10.545-23.539 23.539-23.539s23.538 10.545 23.538 23.539v282.46c0 12.993-10.545 23.539-23.538 23.539s-23.539-10.546-23.539-23.539v-282.46zm-117.69 0c0-12.993 10.545-23.539 23.539-23.539s23.539 10.545 23.539 23.539v282.46c0 12.993-10.545 23.539-23.539 23.539s-23.539-10.546-23.539-23.539v-282.46z\"/></svg>`;\n//     const ctx = canvas.getContext(\"2d\");\n//     const input = document.getElementsByName(inputName);\n//     const clickX = new Array();\n//     const clickY = new Array();\n//     const clickDrag = new Array();\n//     let paint;\n//     canvas.width = canvasW;\n//     canvas.height = canvasH;\n//     input[0].insertAdjacentElement(\"afterEnd\", canvas);\n//     // canvas.insertAdjacentHTML(\"afterEnd\", btnClear);\n//\n//\n//     canvas.addEventListener(\"touchstart\", function touchStart(e) {\n//\n//         let mouseX = e.pageX - this.offsetLeft;\n//         let mouseY = e.pageY - this.offsetTop;\n//\n//         paint = true;\n//\n//         addClick(e.touches[0].pageX - this.offsetLeft, e.touches[0].pageY - this.offsetTop);\n//         redraw();\n//\n//     });\n//\n//     canvas.addEventListener(\"touchmove\", function touchMove(e) {\n//\n//         if (paint) {\n//             addClick(e.touches[0].pageX - this.offsetLeft, e.touches[0].pageY - this.offsetTop, true);\n//             redraw();\n//         }\n//\n//     });\n//\n//     canvas.addEventListener(\"touchend\", () => {paint = false; setInputValue()});\n//\n//     canvas.addEventListener(\"touchleave\", () => {paint = false; setInputValue()});\n//\n//     function addClick(x, y, dragging) {\n//         clickX.push(x);\n//         clickY.push(y);\n//         clickDrag.push(dragging);\n//     }\n//\n//     function setInputValue () {\n//         input[0].value = canvas.toDataURL(\"image/jpeg\");\n//     }\n//\n//     function redraw(){\n//         ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n//\n//         ctx.strokeStyle = \"#000000\";\n//         ctx.lineJoin = \"round\";\n//         ctx.lineWidth = 1;\n//\n//         for(var i=0; i < clickX.length; i++) {\n//             ctx.beginPath();\n//             if(clickDrag[i] && i){\n//                 ctx.moveTo(clickX[i-1], clickY[i-1]);\n//             }else{\n//                 ctx.moveTo(clickX[i]-1, clickY[i]);\n//             }\n//             ctx.lineTo(clickX[i], clickY[i]);\n//             ctx.closePath();\n//             ctx.stroke();\n//         }\n//     }\n// }\n//\n// drawSign(\"test2\", 150, 80);"],"file":"script.min.js"}